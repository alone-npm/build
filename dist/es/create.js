import{fileURLToPath as e}from"url";import o from"path";import r from"fs";const i={copy(e,o,r=!1){"string"==typeof e?this._copySingle(e,o,r):Array.isArray(e)?this._copyMultiple(e,o,r):"object"==typeof e&&this._copyMap(e,r)},_copySingle(e,o,i){if(!r.existsSync(e))return;if(r.existsSync(o)&&!i)return;const t=r.statSync(e);t.isDirectory()?this._copyDirectory(e,o):t.isFile()&&this._copyFile(e,o)},_copyDirectory(e,i){r.existsSync(i)||r.mkdirSync(i,{recursive:!0});const t=r.readdirSync(e);for(const r of t){const t=o.join(e,r),s=o.join(i,r);this._copySingle(t,s,!0)}},_copyFile(e,o){r.copyFileSync(e,o)},_copyMultiple(e,r,i){for(const t of e){const e=o.join(r,o.basename(t));this._copySingle(t,e,i)}},_copyMap(e,o){for(const[r,i]of Object.entries(e))this._copySingle(r,i,o)}};function t(t,{name:s="projectPackage",pack:c=()=>null}={}){const n=o.dirname(e(import.meta.url)),p=process.argv[2]||s,y=o.resolve(process.cwd(),p);i.copy(o.resolve(n,"pack"),o.resolve(y,"pack"),!0),"object"==typeof t&&(Array.isArray(t)?t.forEach((e=>{i.copy(o.resolve(n,e),o.resolve(y,e),!0)})):Object.keys(t).forEach((e=>{i.copy(o.resolve(n,e),o.resolve(y,t[e]),!0)}))),c&&"function"==typeof c&&c({install:n,name:p,app:y,pack:{file:o.resolve(process.cwd(),"package.json"),is(){return r.existsSync(this.file)},get(){return this.is()?JSON.parse(r.readFileSync(this.file,"utf-8")||"{}"):{}},save(e){return r.writeFileSync(this.file,JSON.stringify(e,null,2))}}})}export{i as FileManager,t as default};
